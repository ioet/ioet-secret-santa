name: backend secret-santa workflow

on:
  push:
    branches: [main]
    paths:
      - "!infrastructure/frontend/**"
      - "infrastructure/backend/**"
  pull_request:
    paths:
      - "!infrastructure/frontend/**"
      - "infrastructure/backend/**"

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    env:
      WORKING_DIR: infrastructure/backend
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Secret santa image to Amazon ECR
        env:
          ECR_REGISTRY_STEP: ${{ steps.login-ecr.outputs.registry }}
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 058565519576.dkr.ecr.us-east-1.amazonaws.com
          docker build -t secret-santa-repository .
          docker tag secret-santa-repository:latest 058565519576.dkr.ecr.us-east-1.amazonaws.com/secret-santa-repository:latest
          docker push 058565519576.dkr.ecr.us-east-1.amazonaws.com/secret-santa-repository:latest
        working-directory: ./api         

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.9

      - name: Authenticate with the TF modules repository
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.INFRA_TERRAFORM_MODULES_SSH_PRIV_KEY }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./${{ env.WORKING_DIR }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./${{ env.WORKING_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./${{ env.WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: ./${{ env.WORKING_DIR }}

      - name: Update Pull Request with Plan
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### [${{ env.WORKING_DIR }}][Terraform Plan ðŸ“– \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./${{ env.WORKING_DIR }}
